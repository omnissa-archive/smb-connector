// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SmbDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmbDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* FolderStructureRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FolderStructureRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeDownloadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeDownloadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadRequestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadRequestData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_request_2eproto() {
  protobuf_AddDesc_request_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "request.proto");
  GOOGLE_CHECK(file != NULL);
  SmbDetails_descriptor_ = file->message_type(0);
  static const int SmbDetails_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmbDetails, workgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmbDetails, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmbDetails, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmbDetails, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmbDetails, kerberos_),
  };
  SmbDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmbDetails_descriptor_,
      SmbDetails::default_instance_,
      SmbDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmbDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmbDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmbDetails));
  RequestPacket_descriptor_ = file->message_type(1);
  static const int RequestPacket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, smbdetails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, folderstructurerequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, rangedownloadrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, uploadrequestdata_),
  };
  RequestPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPacket_descriptor_,
      RequestPacket::default_instance_,
      RequestPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPacket));
  FolderStructureRequest_descriptor_ = file->message_type(2);
  static const int FolderStructureRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderStructureRequest, showonlyfolders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderStructureRequest, showhiddenfiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderStructureRequest, pagesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderStructureRequest, level_),
  };
  FolderStructureRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FolderStructureRequest_descriptor_,
      FolderStructureRequest::default_instance_,
      FolderStructureRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderStructureRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolderStructureRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FolderStructureRequest));
  RangeDownloadRequest_descriptor_ = file->message_type(3);
  static const int RangeDownloadRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDownloadRequest, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDownloadRequest, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDownloadRequest, chunksize_),
  };
  RangeDownloadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeDownloadRequest_descriptor_,
      RangeDownloadRequest::default_instance_,
      RangeDownloadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDownloadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDownloadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeDownloadRequest));
  UploadRequestData_descriptor_ = file->message_type(4);
  static const int UploadRequestData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequestData, data_),
  };
  UploadRequestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadRequestData_descriptor_,
      UploadRequestData::default_instance_,
      UploadRequestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadRequestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadRequestData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_request_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmbDetails_descriptor_, &SmbDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPacket_descriptor_, &RequestPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FolderStructureRequest_descriptor_, &FolderStructureRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeDownloadRequest_descriptor_, &RangeDownloadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadRequestData_descriptor_, &UploadRequestData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_request_2eproto() {
  delete SmbDetails::default_instance_;
  delete SmbDetails_reflection_;
  delete RequestPacket::default_instance_;
  delete RequestPacket_reflection_;
  delete FolderStructureRequest::default_instance_;
  delete FolderStructureRequest_reflection_;
  delete RangeDownloadRequest::default_instance_;
  delete RangeDownloadRequest_reflection_;
  delete UploadRequestData::default_instance_;
  delete UploadRequestData_reflection_;
}

void protobuf_AddDesc_request_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rrequest.proto\"b\n\nSmbDetails\022\021\n\tworkgro"
    "up\030\001 \002(\t\022\020\n\010username\030\002 \002(\t\022\020\n\010password\030\003"
    " \002(\t\022\013\n\003url\030\004 \002(\t\022\020\n\010kerberos\030\005 \001(\010\"\315\001\n\r"
    "RequestPacket\022\037\n\nsmbDetails\030\001 \001(\0132\013.SmbD"
    "etails\0227\n\026folderStructureRequest\030\002 \001(\0132\027"
    ".FolderStructureRequest\0223\n\024rangeDownload"
    "Request\030\003 \001(\0132\025.RangeDownloadRequest\022-\n\021"
    "uploadRequestData\030\004 \001(\0132\022.UploadRequestD"
    "ata\"k\n\026FolderStructureRequest\022\027\n\017showOnl"
    "yFolders\030\001 \001(\010\022\027\n\017showHiddenFiles\030\002 \001(\010\022"
    "\020\n\010pageSize\030\003 \002(\r\022\r\n\005level\030\004 \001(\r\"E\n\024Rang"
    "eDownloadRequest\022\r\n\005start\030\001 \002(\004\022\013\n\003end\030\002"
    " \002(\004\022\021\n\tchunkSize\030\003 \002(\004\"!\n\021UploadRequest"
    "Data\022\014\n\004data\030\001 \002(\014", 538);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "request.proto", &protobuf_RegisterTypes);
  SmbDetails::default_instance_ = new SmbDetails();
  RequestPacket::default_instance_ = new RequestPacket();
  FolderStructureRequest::default_instance_ = new FolderStructureRequest();
  RangeDownloadRequest::default_instance_ = new RangeDownloadRequest();
  UploadRequestData::default_instance_ = new UploadRequestData();
  SmbDetails::default_instance_->InitAsDefaultInstance();
  RequestPacket::default_instance_->InitAsDefaultInstance();
  FolderStructureRequest::default_instance_->InitAsDefaultInstance();
  RangeDownloadRequest::default_instance_->InitAsDefaultInstance();
  UploadRequestData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_request_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_request_2eproto {
  StaticDescriptorInitializer_request_2eproto() {
    protobuf_AddDesc_request_2eproto();
  }
} static_descriptor_initializer_request_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SmbDetails::kWorkgroupFieldNumber;
const int SmbDetails::kUsernameFieldNumber;
const int SmbDetails::kPasswordFieldNumber;
const int SmbDetails::kUrlFieldNumber;
const int SmbDetails::kKerberosFieldNumber;
#endif  // !_MSC_VER

SmbDetails::SmbDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmbDetails::InitAsDefaultInstance() {
}

SmbDetails::SmbDetails(const SmbDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmbDetails::SharedCtor() {
  _cached_size_ = 0;
  workgroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kerberos_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmbDetails::~SmbDetails() {
  SharedDtor();
}

void SmbDetails::SharedDtor() {
  if (workgroup_ != &::google::protobuf::internal::kEmptyString) {
    delete workgroup_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void SmbDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmbDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmbDetails_descriptor_;
}

const SmbDetails& SmbDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

SmbDetails* SmbDetails::default_instance_ = NULL;

SmbDetails* SmbDetails::New() const {
  return new SmbDetails;
}

void SmbDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_workgroup()) {
      if (workgroup_ != &::google::protobuf::internal::kEmptyString) {
        workgroup_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    kerberos_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmbDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string workgroup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workgroup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->workgroup().data(), this->workgroup().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // required string url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kerberos;
        break;
      }

      // optional bool kerberos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kerberos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kerberos_)));
          set_has_kerberos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmbDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string workgroup = 1;
  if (has_workgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workgroup().data(), this->workgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->workgroup(), output);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // required string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->url(), output);
  }

  // optional bool kerberos = 5;
  if (has_kerberos()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->kerberos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmbDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string workgroup = 1;
  if (has_workgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->workgroup().data(), this->workgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->workgroup(), target);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // required string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // optional bool kerberos = 5;
  if (has_kerberos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->kerberos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmbDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string workgroup = 1;
    if (has_workgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workgroup());
    }

    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bool kerberos = 5;
    if (has_kerberos()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmbDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmbDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmbDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmbDetails::MergeFrom(const SmbDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workgroup()) {
      set_workgroup(from.workgroup());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_kerberos()) {
      set_kerberos(from.kerberos());
  }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmbDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmbDetails::CopyFrom(const SmbDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmbDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SmbDetails::Swap(SmbDetails* other) {
  if (other != this) {
    std::swap(workgroup_, other->workgroup_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(url_, other->url_);
    std::swap(kerberos_, other->kerberos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmbDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmbDetails_descriptor_;
  metadata.reflection = SmbDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPacket::kSmbDetailsFieldNumber;
const int RequestPacket::kFolderStructureRequestFieldNumber;
const int RequestPacket::kRangeDownloadRequestFieldNumber;
const int RequestPacket::kUploadRequestDataFieldNumber;
#endif  // !_MSC_VER

RequestPacket::RequestPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPacket::InitAsDefaultInstance() {
  smbdetails_ = const_cast< ::SmbDetails*>(&::SmbDetails::default_instance());
  folderstructurerequest_ = const_cast< ::FolderStructureRequest*>(&::FolderStructureRequest::default_instance());
  rangedownloadrequest_ = const_cast< ::RangeDownloadRequest*>(&::RangeDownloadRequest::default_instance());
  uploadrequestdata_ = const_cast< ::UploadRequestData*>(&::UploadRequestData::default_instance());
}

RequestPacket::RequestPacket(const RequestPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPacket::SharedCtor() {
  _cached_size_ = 0;
  smbdetails_ = NULL;
  folderstructurerequest_ = NULL;
  rangedownloadrequest_ = NULL;
  uploadrequestdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPacket::~RequestPacket() {
  SharedDtor();
}

void RequestPacket::SharedDtor() {
  if (this != default_instance_) {
    delete smbdetails_;
    delete folderstructurerequest_;
    delete rangedownloadrequest_;
    delete uploadrequestdata_;
  }
}

void RequestPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPacket_descriptor_;
}

const RequestPacket& RequestPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

RequestPacket* RequestPacket::default_instance_ = NULL;

RequestPacket* RequestPacket::New() const {
  return new RequestPacket;
}

void RequestPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_smbdetails()) {
      if (smbdetails_ != NULL) smbdetails_->::SmbDetails::Clear();
    }
    if (has_folderstructurerequest()) {
      if (folderstructurerequest_ != NULL) folderstructurerequest_->::FolderStructureRequest::Clear();
    }
    if (has_rangedownloadrequest()) {
      if (rangedownloadrequest_ != NULL) rangedownloadrequest_->::RangeDownloadRequest::Clear();
    }
    if (has_uploadrequestdata()) {
      if (uploadrequestdata_ != NULL) uploadrequestdata_->::UploadRequestData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SmbDetails smbDetails = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smbdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_folderStructureRequest;
        break;
      }

      // optional .FolderStructureRequest folderStructureRequest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_folderStructureRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_folderstructurerequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rangeDownloadRequest;
        break;
      }

      // optional .RangeDownloadRequest rangeDownloadRequest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rangeDownloadRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rangedownloadrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uploadRequestData;
        break;
      }

      // optional .UploadRequestData uploadRequestData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uploadRequestData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uploadrequestdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SmbDetails smbDetails = 1;
  if (has_smbdetails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->smbdetails(), output);
  }

  // optional .FolderStructureRequest folderStructureRequest = 2;
  if (has_folderstructurerequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->folderstructurerequest(), output);
  }

  // optional .RangeDownloadRequest rangeDownloadRequest = 3;
  if (has_rangedownloadrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rangedownloadrequest(), output);
  }

  // optional .UploadRequestData uploadRequestData = 4;
  if (has_uploadrequestdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->uploadrequestdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SmbDetails smbDetails = 1;
  if (has_smbdetails()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->smbdetails(), target);
  }

  // optional .FolderStructureRequest folderStructureRequest = 2;
  if (has_folderstructurerequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->folderstructurerequest(), target);
  }

  // optional .RangeDownloadRequest rangeDownloadRequest = 3;
  if (has_rangedownloadrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rangedownloadrequest(), target);
  }

  // optional .UploadRequestData uploadRequestData = 4;
  if (has_uploadrequestdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->uploadrequestdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SmbDetails smbDetails = 1;
    if (has_smbdetails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smbdetails());
    }

    // optional .FolderStructureRequest folderStructureRequest = 2;
    if (has_folderstructurerequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->folderstructurerequest());
    }

    // optional .RangeDownloadRequest rangeDownloadRequest = 3;
    if (has_rangedownloadrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rangedownloadrequest());
    }

    // optional .UploadRequestData uploadRequestData = 4;
    if (has_uploadrequestdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uploadrequestdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPacket::MergeFrom(const RequestPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_smbdetails()) {
      mutable_smbdetails()->::SmbDetails::MergeFrom(from.smbdetails());
    }
    if (from.has_folderstructurerequest()) {
      mutable_folderstructurerequest()->::FolderStructureRequest::MergeFrom(from.folderstructurerequest());
    }
    if (from.has_rangedownloadrequest()) {
      mutable_rangedownloadrequest()->::RangeDownloadRequest::MergeFrom(from.rangedownloadrequest());
    }
    if (from.has_uploadrequestdata()) {
      mutable_uploadrequestdata()->::UploadRequestData::MergeFrom(from.uploadrequestdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPacket::CopyFrom(const RequestPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPacket::IsInitialized() const {

  if (has_smbdetails()) {
    if (!this->smbdetails().IsInitialized()) return false;
  }
  if (has_folderstructurerequest()) {
    if (!this->folderstructurerequest().IsInitialized()) return false;
  }
  if (has_rangedownloadrequest()) {
    if (!this->rangedownloadrequest().IsInitialized()) return false;
  }
  if (has_uploadrequestdata()) {
    if (!this->uploadrequestdata().IsInitialized()) return false;
  }
  return true;
}

void RequestPacket::Swap(RequestPacket* other) {
  if (other != this) {
    std::swap(smbdetails_, other->smbdetails_);
    std::swap(folderstructurerequest_, other->folderstructurerequest_);
    std::swap(rangedownloadrequest_, other->rangedownloadrequest_);
    std::swap(uploadrequestdata_, other->uploadrequestdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPacket_descriptor_;
  metadata.reflection = RequestPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FolderStructureRequest::kShowOnlyFoldersFieldNumber;
const int FolderStructureRequest::kShowHiddenFilesFieldNumber;
const int FolderStructureRequest::kPageSizeFieldNumber;
const int FolderStructureRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

FolderStructureRequest::FolderStructureRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FolderStructureRequest::InitAsDefaultInstance() {
}

FolderStructureRequest::FolderStructureRequest(const FolderStructureRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FolderStructureRequest::SharedCtor() {
  _cached_size_ = 0;
  showonlyfolders_ = false;
  showhiddenfiles_ = false;
  pagesize_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FolderStructureRequest::~FolderStructureRequest() {
  SharedDtor();
}

void FolderStructureRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FolderStructureRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FolderStructureRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FolderStructureRequest_descriptor_;
}

const FolderStructureRequest& FolderStructureRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

FolderStructureRequest* FolderStructureRequest::default_instance_ = NULL;

FolderStructureRequest* FolderStructureRequest::New() const {
  return new FolderStructureRequest;
}

void FolderStructureRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    showonlyfolders_ = false;
    showhiddenfiles_ = false;
    pagesize_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FolderStructureRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool showOnlyFolders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showonlyfolders_)));
          set_has_showonlyfolders();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_showHiddenFiles;
        break;
      }

      // optional bool showHiddenFiles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showHiddenFiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showhiddenfiles_)));
          set_has_showhiddenfiles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pageSize;
        break;
      }

      // required uint32 pageSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagesize_)));
          set_has_pagesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FolderStructureRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool showOnlyFolders = 1;
  if (has_showonlyfolders()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->showonlyfolders(), output);
  }

  // optional bool showHiddenFiles = 2;
  if (has_showhiddenfiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->showhiddenfiles(), output);
  }

  // required uint32 pageSize = 3;
  if (has_pagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pagesize(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FolderStructureRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool showOnlyFolders = 1;
  if (has_showonlyfolders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->showonlyfolders(), target);
  }

  // optional bool showHiddenFiles = 2;
  if (has_showhiddenfiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->showhiddenfiles(), target);
  }

  // required uint32 pageSize = 3;
  if (has_pagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pagesize(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FolderStructureRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool showOnlyFolders = 1;
    if (has_showonlyfolders()) {
      total_size += 1 + 1;
    }

    // optional bool showHiddenFiles = 2;
    if (has_showhiddenfiles()) {
      total_size += 1 + 1;
    }

    // required uint32 pageSize = 3;
    if (has_pagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagesize());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FolderStructureRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FolderStructureRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FolderStructureRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FolderStructureRequest::MergeFrom(const FolderStructureRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_showonlyfolders()) {
      set_showonlyfolders(from.showonlyfolders());
    }
    if (from.has_showhiddenfiles()) {
      set_showhiddenfiles(from.showhiddenfiles());
    }
    if (from.has_pagesize()) {
      set_pagesize(from.pagesize());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FolderStructureRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FolderStructureRequest::CopyFrom(const FolderStructureRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderStructureRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void FolderStructureRequest::Swap(FolderStructureRequest* other) {
  if (other != this) {
    std::swap(showonlyfolders_, other->showonlyfolders_);
    std::swap(showhiddenfiles_, other->showhiddenfiles_);
    std::swap(pagesize_, other->pagesize_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FolderStructureRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FolderStructureRequest_descriptor_;
  metadata.reflection = FolderStructureRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeDownloadRequest::kStartFieldNumber;
const int RangeDownloadRequest::kEndFieldNumber;
const int RangeDownloadRequest::kChunkSizeFieldNumber;
#endif  // !_MSC_VER

RangeDownloadRequest::RangeDownloadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangeDownloadRequest::InitAsDefaultInstance() {
}

RangeDownloadRequest::RangeDownloadRequest(const RangeDownloadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangeDownloadRequest::SharedCtor() {
  _cached_size_ = 0;
  start_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  chunksize_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeDownloadRequest::~RangeDownloadRequest() {
  SharedDtor();
}

void RangeDownloadRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RangeDownloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeDownloadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeDownloadRequest_descriptor_;
}

const RangeDownloadRequest& RangeDownloadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

RangeDownloadRequest* RangeDownloadRequest::default_instance_ = NULL;

RangeDownloadRequest* RangeDownloadRequest::New() const {
  return new RangeDownloadRequest;
}

void RangeDownloadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = GOOGLE_ULONGLONG(0);
    end_ = GOOGLE_ULONGLONG(0);
    chunksize_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeDownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // required uint64 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chunkSize;
        break;
      }

      // required uint64 chunkSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunkSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunksize_)));
          set_has_chunksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangeDownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start(), output);
  }

  // required uint64 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end(), output);
  }

  // required uint64 chunkSize = 3;
  if (has_chunksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->chunksize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangeDownloadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start(), target);
  }

  // required uint64 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end(), target);
  }

  // required uint64 chunkSize = 3;
  if (has_chunksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->chunksize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangeDownloadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }

    // required uint64 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }

    // required uint64 chunkSize = 3;
    if (has_chunksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunksize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeDownloadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeDownloadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeDownloadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeDownloadRequest::MergeFrom(const RangeDownloadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_chunksize()) {
      set_chunksize(from.chunksize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeDownloadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeDownloadRequest::CopyFrom(const RangeDownloadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDownloadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RangeDownloadRequest::Swap(RangeDownloadRequest* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(chunksize_, other->chunksize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeDownloadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeDownloadRequest_descriptor_;
  metadata.reflection = RangeDownloadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadRequestData::kDataFieldNumber;
#endif  // !_MSC_VER

UploadRequestData::UploadRequestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadRequestData::InitAsDefaultInstance() {
}

UploadRequestData::UploadRequestData(const UploadRequestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadRequestData::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadRequestData::~UploadRequestData() {
  SharedDtor();
}

void UploadRequestData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void UploadRequestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadRequestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadRequestData_descriptor_;
}

const UploadRequestData& UploadRequestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_request_2eproto();
  return *default_instance_;
}

UploadRequestData* UploadRequestData::default_instance_ = NULL;

UploadRequestData* UploadRequestData::New() const {
  return new UploadRequestData;
}

void UploadRequestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadRequestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadRequestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadRequestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadRequestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadRequestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadRequestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadRequestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadRequestData::MergeFrom(const UploadRequestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadRequestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadRequestData::CopyFrom(const UploadRequestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRequestData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UploadRequestData::Swap(UploadRequestData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadRequestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadRequestData_descriptor_;
  metadata.reflection = UploadRequestData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
